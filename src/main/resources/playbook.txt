You are Cursor. Update this MuleSoft A2A External Wrapper project from the YAML file at:
  src/main/resources/external-agent-mapping.yaml

Goal
- Keep the project a GENERIC, minimal A2A‑compliant wrapper that accepts an A2A task, calls a non‑A2A external agent over HTTP, and returns the smallest valid A2A response.
- DO NOT add new modules or change the runtime. Only edit the existing files listed below.
- Do not hallucinate. If a value or example is missing in YAML, keep the current code as‑is.
- MINIMAL CHANGES ONLY: Touch only what's needed - agent skills in XML and the DataWeave output structures. Do NOT modify server config, listeners, connectors, or A2A protocol handling.
- NO ERROR HIDING: Do not add try-catch, defaults, or fallback logic in DataWeave. If something fails, it should fail loudly for debugging.

Files to read
1) src/main/resources/external-agent-mapping.yaml  (source of truth for external endpoint + request/response *samples*)
2) src/main/mule/a2a-external-wrapper.xml          (flows + A2A server card)
3) src/main/resources/config.properties            (external URL/headers/timeouts + agent card props)

YAML guidance (what we expect to find)
external:
  url: string
  method: POST|GET|PUT|PATCH         # default POST
  timeoutMs: number                  # default 10000
  headers: { <string>: <string> }    # HTTP headers as a map
  # Use any embedded *samples* in YAML (e.g., sampleCurl, sampleRequest, sampleResponse)
  # to infer the external payload/response shape. Do NOT depend on a formal external schema.
  request:
    modelParams:
      temperature: number            # optional; default 0.2
      max_tokens: number             # optional; default 300
  response:
    treatsBodyAsJson: true|false     # default true
    # Prefer using the provided sampleResponse to infer how to extract the reply text.

agent:
  host: "http://localhost:8081"
  path: "/azure-agent-fins"
  name: "Fins Customer Support Agent"
  version: "1.0.0"
  description: "What the agent does"
  skills:
    - { id: "1", name: "Transaction Issues", description: "...", tags: ["support", "transactions"] }
    - { id: "2", name: "Financial Dispute Resolution Guidance", description: "...", tags: ["disputes", "resolution"] }

A) Update config.properties
- Set these keys from YAML (create or overwrite):
    external.url=<external.url>
    external.method=<external.method or POST>
    external.timeout.ms=<external.timeoutMs or 10000>
    external.headers.json=<minified single-line JSON built from external.headers>
    external.temperature=<modelParams.temperature or 0.2>
    external.max_tokens=<modelParams.max_tokens or 300>
    agent.host=<agent.host>
    agent.path=<agent.path>
    agent.name=<agent.name>
    agent.version=<agent.version>
    agent.description=<agent.description>

- Materialize agent skills in config.properties to exactly match YAML — no placeholders:
    agent.skill.1.id, agent.skill.1.name, agent.skill.1.description
    agent.skill.2.id, ...
  Rules:
    • If YAML has fewer skills than config, DELETE the extra agent.skill.N.* entries from config.
    • If YAML has more, ADD new agent.skill.N.* entries so that the count in config matches YAML exactly.
    • Only the contiguous 1..N range is allowed (no gaps).

- IMPORTANT: external.headers.json must be a single‑line JSON string with double quotes escaped if needed, e.g.
    external.headers.json={"Accept":"application/json","Content-Type":"application/json","api-key":"***"}

B) Update a2a-external-wrapper.xml (A2A card + flows)

1. DO NOT MODIFY <a2a:server-config> or <http:listener-config> or any connector configurations - these remain as-is.

2. Replace ONLY the <a2a:skills> children with **exactly one <a2a:agent-skill> per agent.skill.N.* set present in config.properties** (no more, no less). Do NOT use expressions inside a2a:agent-skill attributes (card attributes don't support expressions).
   
   IMPORTANT - A2A Protocol Compliance:
   - ProtocolVersion: The A2A connector (v0.3.0-BETA) does not expose protocolVersion as an XML attribute.
     It should be automatically set by the connector, but if missing from the agent card JSON output,
     this is a known connector limitation. Tags are the critical requirement that IS supported.
   - Each skill MUST include <a2a:tags> with at least one tag (A2A specification requirement - THIS IS CRITICAL)
   
   Generate explicit static XML nodes by reading the properties and writing literal strings, e.g.:
   <a2a:agent-skill id="1" name="Transaction Issues">
     <a2a:description><![CDATA[Customer Support for Transaction Issues]]></a2a:description>
     <a2a:tags>
       <a2a:tag value="support"/>
       <a2a:tag value="transactions"/>
     </a2a:tags>
   </a2a:agent-skill>
   
   Tags should be derived from skill.tags in YAML or inferred from skill name/description if not provided.
   <!-- Skills generated from config.properties to mirror agent.skill.N.* exactly. -->

2b. The "Apply external headers" transform should use this DataWeave expression (do NOT add try-catch or defaults):
   %dw 2.0
   output application/java
   ---
   read(p("external.headers.json"), "application/json") as Object {class: "java.util.HashMap"}
   
   This will fail loudly if external.headers.json is not valid JSON - which is intentional for debugging.

3. Update transform > *** BUILD - Payload ***
  ONLY update the DataWeave output structure to match the external API:
  
  Part A - Extract the user prompt (KEEP EXISTING LOGIC):
    - Keep the existing "firstText" variable that extracts text from A2A message parts
    - Do NOT modify the A2A message parsing logic
  
  Part B - Build the request body (UPDATE ONLY THIS PART):
    - Use the curl > request sample from external-agent-mapping.yaml to determine the JSON structure
    - Use requestUserTextPath from YAML mapping.mapping to place the user prompt in the correct field
    - For API parameters (like temperature, max_tokens): Use ${external.temperature} and ${external.max_tokens} placeholders ONLY in the output structure comments, then hardcode the literal values (e.g., 0.2, 300) in the actual JSON
    - Example: If external API expects {"prompt": "...", "temperature": 0.7}, output: {prompt: firstText, temperature: 0.7}
    - Keep the structure generic - do NOT add API-specific fields unless they exist in the YAML sample

4. Update transform > *** BUILD - Response ***
  Change ONLY the "content" variable extraction logic - DO NOT modify the A2A response structure:
  - Use the responseTextPath from YAML mapping.mapping to extract the response text
  - Example: If responseTextPath is "choices[0].message.content", use: var content = payload.choices[0].message.content
  - If responseTextPath is "response.text", use: var content = payload.response.text
  - DO NOT add default values or try-catch - let it fail if the path is wrong
  - Keep the rest of the A2A response structure exactly as-is (kind, id, sessionId, status, message, parts)

C) Keep everything else untouched
- Don't change connectors, namespaces, or logging.
- Don't introduce dynamic expressions in A2A card attribute values.
- Don't change the tester flow except where URL/headers need to be read from properties in the same way.

D) Validate
- Project compiles.
- DW scripts compile (quote 'type' in parts objects).
- **Skills parity**: Number of <a2a:agent-skill> nodes in XML equals the number of agent.skill.N.* groups in config.properties.
- Properties exist for all skills you materialized.

E) List all the changes you made in the code as a summary at the end.
